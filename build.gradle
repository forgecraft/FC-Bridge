plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '0.1.111'
    id 'net.neoforged.gradleutils' version '3.0.0'
    id "me.modmuss50.mod-publish-plugin" version "0.6.3"
    id "dev.nanite.plugins.insaniam" version "0.2.1-SNAPSHOT"
}

version = gradleutils.version.toString().replace("v", "")

insaniam {
    changelog {
        file = file('CHANGELOG.md')
        version = project.version
    }
}

gradleutils {
    version {
        tags {
            includePrefix("v21.*")
        }
        branches {
            suffixBranch()
            suffixExemptedBranch('main')
        }
    }
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers.add('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            client()

            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
            programArgument "--width=1920"
            programArgument "--height=1080"
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }


configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    computeReposFromProperties()
}

dependencies {
    computeDepsFromProperties()
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

publishMods {
    dryRun = providers.environmentVariable("GITHUB_TOKEN").getOrNull() == null

    file = jar.archiveFile
    version = project.version
    changelog = insaniamUtils.createChangelog()
    displayName = "FC Bridge ${project.version}"
    type = STABLE

    github {
        repository = "forgecraft/fc-bridge"
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        commitish = providers.environmentVariable("GITHUB_SHA").orElse("dryRun")
        tagName = providers.environmentVariable("GITHUB_REF_NAME").orElse("dryRun")
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }

    repositories {
        def token = providers.environmentVariable("MAVEN_TOKEN")
        if (token.isPresent()) {
            maven {
                name = "forgecraft"
                url = uri("https://maven.neoforgecraft.com/repository/maven-releases/")
                credentials {
                    username = "forgecraft-org"
                    password = token.get()
                }
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

//#region Pointless Fun
/**
 * The following is purely me having fun in gradle. There is no good reason to do this.
 */

/**
 * Something just for fun.
 * Build a set of dependencies from the properties defined in the gradle.properties file.
 *
 * The current schema is:
 * - {type}:{group}:{artifact}:version
 */
def computeDepsFromProperties() {
    def types = [
            "runtime", "compile", "implementation", "localRuntime"
    ]

    def typeCorrections = [
            "runtime"      : "runtimeOnly",
            "compile"      : "compileOnly",
            "implementation": "implementation",
            "localRuntime" : "localRuntime"
    ]

    def availableProperties = project.properties.findAll {
        // Find all the properties that start with one of the types
        types.any { type -> it.key.startsWith(type) }
    }

    print("Found ${availableProperties.size()} properties to process\n")

    availableProperties.each { key, value ->
        def parts = key.split(":")
        if (parts.size() == 4) {
            def type = parts[0]
            def group = parts[1]
            def artifact = parts[2]

            // The version is the value of the property
            def version = value

            def correctedType = typeCorrections[type]

            print("Adding dependency: ${correctedType} ${group}:${artifact}:${version}\n")
            project.dependencies.add(correctedType, "${group}:${artifact}:${version}")
        } else {
            print("Skipping property ${key} as it does not match the schema\n")
        }
    }
}

/**
 * Something just for fun.
 * Build a set of repositories from the properties defined in the gradle.properties file.
 *
 * The current schema is:
 * - repo:{name}=url
 */
def computeReposFromProperties() {
    def availableProperties = project.properties.findAll {
        // Find all the properties that start with "repo:"
        it.key.startsWith("repo:")
    }

    print("Found ${availableProperties.size()} properties to process\n")

    availableProperties.each { key, value ->
        def parts = key.split(":")
        if (parts.size() == 2) {
            def repoName = parts[1]

            // The url is the value of the property
            def repoUrl = value

            print("Adding repository: ${repoName} ${repoUrl}\n")
            project.repositories.add(project.repositories.maven { repo ->
                name repoName
                url repoUrl
                content {
                    includeGroup repoName
                }
            })
        } else {
            print("Skipping property ${key} as it does not match the schema\n")
        }
    }
}
//#endregion
